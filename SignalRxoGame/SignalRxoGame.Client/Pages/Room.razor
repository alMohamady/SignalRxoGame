@using Microsoft.AspNetCore.SignalR.Client
@using SignalRxoGame.shared

@if(myRoom != null)
{
    <h3>Room : @myRoom.RoomName</h3>
    if (myRoom.players.Count < 2)
    {
        <h3> you can't play this game with ypur self please wait for another player </h3>
    }
}

@if(!myRoom.myGame.GameStart && myRoom.myGame.xPlayerConId != myPlayerId && myRoom.players.Count == 2)
{
    <h3>you must wait for your next player to start :)</h3>
}
@if ((!myRoom.myGame.GameStart || myRoom.myGame.GameOver)
     && myRoom.myGame.xPlayerConId == myPlayerId && myRoom.players.Count == 2)
{
    <button @onclick="StartGame">Start Game</button>
}

@if (myRoom.myGame.GameStart)
{
    <h3>the game @myRoom.RoomName on the run</h3>
    <h2> @myRoom.myGame.currentSympol is on the game </h2>
    <h4> X Player is @myRoom.players[0].name </h4>
    <h4> O Player is @myRoom.players[1].name </h4>



}


@code {
    [Parameter]
    public GameRoom? myRoom { get; set; }

    [CascadingParameter]
    public HubConnection? hubCon {get; set;}

    private string? myPlayerId;

    protected override async Task OnInitializedAsync()
    {
        if (myRoom == null || hubCon == null || hubCon.ConnectionId == null)
        {
            return;
        }

        myPlayerId = hubCon.ConnectionId;

        hubCon.On<Player>("NewPlayerJoined", Player =>
        {
            myRoom.players.Add(Player);
            StateHasChanged();
        });

        hubCon.On<GameRoom>("GameUpdate", updatedRoom =>
        {
            myRoom = updatedRoom;
            StateHasChanged();
        });
    }

    public async Task StartGame()
    {
        if (myRoom == null || hubCon == null || hubCon.ConnectionId == null)
        {
            return;
        }
        await hubCon.InvokeAsync("StartGame", myRoom.RoomId);
    }
}
